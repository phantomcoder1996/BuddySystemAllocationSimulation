
			if (readyQueue.size() == 1 && !firstArrival)
			{
				
				pcb temp = readyQueue[0];
				if ((!(memalloc.allocate(temp)))) //not allocated before
				{
					printQueueState();
					readyQueue.erase(readyQueue.begin());
					if (temp.noAllocationCount <= 5) //
					{

						readyQueue.push_back(temp); //process cannot be executed;

					}
					else
					{
						cout << "Process cannot be allocated" << endl;
					}
					//clk++;
					EnqueueArrivingProcesses();
					

				}
				if (running.pid != temp.pid) //not same process
				{
					//clk++;
					mylog.logSwitching(clk, switchtime);
					clk += switchtime;
					//clk++;
					//	_sleep(switchtime);

					running = temp;
					printQueueState();
					if (running.laststopTime == 0)
					{
						running.updatepcb(0, clk);
					}
					else
					{
						running.updatepcb(1, clk); //resumed
					}
					readyQueue.erase(readyQueue.begin());
					if (running.remainingTime - quantum > 0)
					{

						//	_sleep(quantum);
						running.updatepcb(2, clk + quantum); //run and stop
						mylog.logProcess(running, clk, quantum);

						clk += quantum;

						EnqueueArrivingProcesses(); //check if a process has arrived before pushing the process to the end of the queue
						readyQueue.push_back(running);
						//printQueueState();

					}
					else//The process will finish
					{
						int temprmtime = running.remainingTime;
						//_sleep(running.remainingTime);
						running.updatepcb(3, clk + running.remainingTime);
						mylog.logProcess(running, clk, temprmtime);
						clk += temprmtime;

						//now deallocate the procese
						memalloc.deallocate(running);
						finished.push_back(running);
						//output.logFinished(running);
						EnqueueArrivingProcesses();
						//printQueueState();
					}



				}

				else
				{
					printQueueState();
					readyQueue.erase(readyQueue.begin());
					if (running.remainingTime - quantum > 0)
					{

						if (running.laststopTime == 0)
						{
							running.updatepcb(0, clk);
						}
						else
						{
							running.updatepcb(1, clk); //resumed
						}
						
						running.updatepcb(2, clk + quantum); //run and stop
						mylog.logProcess(running, clk, quantum);
						clk += quantum;

						EnqueueArrivingProcesses(); //check if a process has arrived before pushing the process to the end of the queue
						readyQueue.push_back(running);
						//printQueueState();

					}
					else//The process will finish
					{
						int temprmtime = running.remainingTime;
						//_sleep(running.remainingTime);
						running.updatepcb(3, clk + running.remainingTime);
						mylog.logProcess(running, clk, temprmtime);
						clk += temprmtime;

						//now deallocate the procese
						memalloc.deallocate(running);
						finished.push_back(running);
						//output.logFinished(running);
						EnqueueArrivingProcesses();
						//printQueueState();
					}

				}
		   }
			else